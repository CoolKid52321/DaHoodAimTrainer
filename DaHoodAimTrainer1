--// Source made by dual#3333 and MagixCrane#2801

repeat wait() until game:IsLoaded()

game:GetService("CorePackages").Packages:Destroy()

assert(getrawmetatable)
grm = getrawmetatable(game)
setreadonly(grm, false)
old = grm.__namecall
grm.__namecall = newcclosure(function(self, ...)
    local args = {...}
    if tostring(args[1]) == "TeleportDetect" then
        return
    elseif tostring(args[1]) == "CHECKER_1" then
        return
    elseif tostring(args[1]) == "CHECKER" then
        return
    elseif tostring(args[1]) == "GUI_CHECK" then
        return
    elseif tostring(args[1]) == "OneMoreTime" then
        return
    elseif tostring(args[1]) == "checkingSPEED" then
        return
    elseif tostring(args[1]) == "BANREMOTE" then
        return
    elseif tostring(args[1]) == "PERMAIDBAN" then
        return
    elseif tostring(args[1]) == "KICKREMOTE" then
        return
    elseif tostring(args[1]) == "BR_KICKPC" then
        return
    elseif tostring(args[1]) == "BR_KICKMOBILE" then
        return
    end
    return old(self, ...)
end)


local players = game:GetService("Players")
local uis = game:GetService("UserInputService")
local runservice = game:GetService("RunService")
local tweenservice = game:GetService("TweenService")
local marketplaceservice = game:GetService("MarketplaceService")
local textservice = game:GetService("TextService")
local coregui = game:GetService("CoreGui")
local httpservice = game:GetService("HttpService")

local player = players.LocalPlayer
local mouse = player:GetMouse()
local camera = game.Workspace.CurrentCamera

-- main aimbot

getgenv().ZyZKey = Enum.KeyCode.Q
getgenv().Prediction = 1.36
getgenv().Tracer = false
getgenv().TracerBugged = false
getgenv().LookAt = false
getgenv().ZyZPart = "UpperTorso"
getgenv().NotifyZyZ = false
getgenv().ViewPlr = false
getgenv().Enabled = false
_G.AirshotFunction = false
_G.AirshotPart = "UpperTorso"
_G.FRAME = Vector3.new(0,20,0)
_G.FRAME2 = Vector3.new(0,20,0)


local guimain = Instance.new("Folder", game.CoreGui)
local CC = game:GetService "Workspace".CurrentCamera
local LocalMouse = game.Players.LocalPlayer:GetMouse()
local Locking = false
local cc = game:GetService("Workspace").CurrentCamera
local gs = game:GetService("GuiService")
local ggi = gs.GetGuiInset
local lp = game:GetService("Players").LocalPlayer
local mouse = lp:GetMouse()

local Tracer = Drawing.new("Line")
Tracer.Visible = false
Tracer.Color = Color3.fromRGB(0, 189, 23)
Tracer.Thickness = 2
Tracer.Transparency = 1

local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(
    function(keygo, ok)
        if (not ok) then
            if (keygo.KeyCode == getgenv().ZyZKey) then
                if getgenv().Enabled then
                    Locking = not Locking
                    if Locking then
                        Plr = getClosestPlayerToCursor()
                        if getgenv().ViewPlr then
                        	game.Workspace.CurrentCamera.CameraSubject = Plr.Character
                            
                        end
                        if getgenv().NotificationsSound then
                            sound:Play()
                        end
                        if getgenv().NotifyZyZ then
                            Library:Notify(': ' .. Plr.Character.Humanoid.DisplayName)
                        end
                    elseif not Locking then
                        
if getgenv().ViewPlr then
	game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
end

if getgenv().NotificationsSound then
    sound1:Play()
end

                        if getgenv().NotifyZyZ then
                            Library:Notify('unlock')
                        end
                    end
                end
            end
        end
    end
)
function getClosestPlayerToCursor()
    local closestPlayer
    local shortestDistance = 137

    for i, v in pairs(game.Players:GetPlayers()) do
        if
            v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and
                v.Character.Humanoid.Health ~= 0 and
                v.Character:FindFirstChild("UpperTorso")
         then
            local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalMouse.X, LocalMouse.Y)).magnitude
            if magnitude < shortestDistance then
                closestPlayer = v
                shortestDistance = magnitude
            end
        end
    end
    return closestPlayer
end

local rawmetatable = getrawmetatable(game)
local old = rawmetatable.__namecall
setreadonly(rawmetatable, false)
rawmetatable.__namecall =
    newcclosure(
    function(...)
        local args = {...}
        if Locking and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" then
            args[3] =
                Plr.Character[getgenv().ZyZPart].Position + (Plr.Character[getgenv().ZyZPart].Velocity * Prediction / 10)
            return old(unpack(args))
        end
        return old(...)
    end
)

game:GetService("RunService").RenderStepped:Connect(
    function()
        if getgenv().autosetup == true then
            local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
            local split = string.split(pingvalue, " ")
            local ping = split[1]
            if tonumber(ping) < 30 then
                getgenv().Prediction = 1.14
            elseif tonumber(ping) <= 30 then
                if tonumber(ping) < 40 then
                    getgenv().Prediction = 1.16
                elseif tonumber(ping) <= 40 then
                    if tonumber(ping) < 50 then
                        getgenv().Prediction = 1.19
                    elseif tonumber(ping) <= 50 then
                        if tonumber(ping) < 70 then
                            getgenv().Prediction = 1.22
                        elseif tonumber(ping) <= 80 then
                            getgenv().Prediction = 1.38
                        elseif tonumber(ping) <= 80 then
                            getgenv().Prediction = 1.39
                        elseif tonumber(ping) <= 90 then
                            getgenv().Prediction = 1.42
                        elseif tonumber(ping) <= 150 then
                            getgenv().Prediction = 1.51
                        elseif tonumber(ping) >= 200 then
                            getgenv().Prediction = 1.69
                        end
                    end
                end
            end
        end
        
        if _G.AirshotFunction == true then
            if Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                getgenv().ZyZPart = _G.AirshotPart
            else
                Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(
                    function(old, new)
                        if new == Enum.HumanoidStateType.Freefall then
                            getgenv().Partz = _G.AirshotPart
                        else
                            getgenv().ZyZPart = "UpperTorso"
                        end
                    end
                )
            end
        end

if getgenv().LookAt and Locking and getgenv().Enabled then
                    local Char = game.Players.LocalPlayer.Character
                local PrimaryPartOfChar = game.Players.LocalPlayer.Character.PrimaryPart
                local NearestChar = Plr.Character
                local NearestRoot = Plr.Character.HumanoidRootPart
                local NearestPos = CFrame.new(PrimaryPartOfChar.Position, Vector3.new(NearestRoot.Position.X, NearestRoot.Position.Y, NearestRoot.Position.Z))
                Char:SetPrimaryPartCFrame(NearestPos)
                
    end
        if getgenv().Tracer == true and Locking then
            local Vector, OnScreen =
                cc:worldToViewportPoint(
                Plr.Character[getgenv().ZyZPart].Position + (Plr.Character[getgenv().ZyZPart].Velocity * Prediction / 10)
            )
            Tracer.Visible = true
            Tracer.From = Vector2.new(mouse.X, mouse.Y + ggi(gs).Y)
            Tracer.To = Vector2.new(Vector.X, Vector.Y)
        elseif getgenv().Tracer == false then
            Tracer.Visible = false
        end
if Tracer.Visible == true and not Locking and getgenv().Enabled then
    getgenv().TracerBugged = true
    Tracer.Visible = false
end

if getgenv().Tracer == true and getgenv().TracerBugged and Locking then
    Tracer.Visible = true
end
    end)

local Version = {
    Value = "0.0.1"
}
    
local target_aim = {
    Aiming = {
        Target = {
            Enabled = nil,
            Key = nil,
            Prediction = nil,
            Radius = nil,
            TargetPart = nil,
            Alerts = nil,
            JumpOffset = nil,
            TargetStats = nil,
            LookAt = nil
        }
    }
}

local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'LuckyHub | Da Hood Aim Trainer',
    Center = true, 
    AutoShow = true,
})

-- You do not have to set your tabs & groups up this way, just a prefrence.
local Tabs = {
    -- Creates a new tab titled Main
    AimingTab = Window:AddTab('Main'),
    MiscTab = Window:AddTab('Misc'),
    ExtraTab = Window:AddTab('Extra'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}


-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
local LeftGroupBox = Tabs.AimingTab:AddLeftGroupbox('TargetBot')
local Player = Tabs.AimingTab:AddLeftGroupbox('Player')
local MovementTab = Tabs.MiscTab:AddLeftGroupbox('Movement')
local FakeAnimationsSec = Tabs.MiscTab:AddLeftGroupbox('Miscellaneous')
local MiscSec = Tabs.MiscTab:AddRightGroupbox('Fake Animations')
local AASec = Tabs.MiscTab:AddRightGroupbox('Anti Lock')
local AimingLockSection = Tabs.AimingTab:AddRightGroupbox('Aim Assist')
local UtilitiesSec = Tabs.AimingTab:AddRightGroupbox('Utilities')
local Aimviewers = Tabs.MiscTab:AddLeftGroupbox('Aim Viewers')

-- Tabboxes are a tiny bit different, but here's a basic example:
--[[

local TabBox = Tabs.Main:AddLeftTabbox() -- Add Tabbox on left side

local Tab1 = TabBox:AddTab('Tab 1')
local Tab2 = TabBox:AddTab('Tab 2')

-- You can now call AddToggle, etc on the tabs you added to the Tabbox
]]

-- Groupbox:AddToggle
-- Arguments: Index, Options
LeftGroupBox:AddToggle('MyToggle', {
    Text = 'Enable',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables targetbot', -- Information shown when you hover over the toggle
}):AddKeyPicker("KeybindXD", {
	Default = "Q",
	SyncToggleState = false,
	Mode = "Always",
	Text = "TargetBot",
	NoUI = false
});

Toggles.MyToggle:OnChanged(function(Bool)
    getgenv().Enabled = Bool;
end);

Options.KeybindXD:OnClick(function()
	getgenv().ZyZKey = Enum.KeyCode[Options.KeybindXD.Value];
end);

LeftGroupBox:AddToggle('Notifications', {
    Text = 'Notifications',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables notifications', -- Information shown when you hover over the toggle
})

Toggles.Notifications:OnChanged(function(Bool)
    getgenv().NotifyZyZ = Bool;
end);

LeftGroupBox:AddToggle('LookAt', {
    Text = 'Look At',
    Default = false, -- Default value (true / false)
    Tooltip = 'Looks at targetted player', -- Information shown when you hover over the toggle
})

Toggles.LookAt:OnChanged(function(Bool)
    getgenv().LookAt = Bool;
end);

LeftGroupBox:AddToggle('SpectateMode', {
    Text = 'Spectate Mode',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables spectate mode', -- Information shown when you hover over the toggle
})

Toggles.SpectateMode:OnChanged(function(Bool)
    getgenv().ViewPlr = Bool;
end);


LeftGroupBox:AddToggle('TracerXD', {
    Text = 'Tracer',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables the tracer', -- Information shown when you hover over the toggle
}):AddColorPicker("TracerColor", {
	Default = Color3.fromRGB(58, 255, 0),
	Title = "Tracer Color"
});

Toggles.TracerXD:OnChanged(function(bool)
    getgenv().Tracer = bool;
end);

Options.TracerColor:OnChanged(function()
	Tracer.Color = Options.TracerColor.Value;
end)

LeftGroupBox:AddToggle('AirshotFunc', {
    Text = 'Airshot Function',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables airshot function', -- Information shown when you hover over the toggle
})

Toggles.AirshotFunc:OnChanged(function(bool)
    _G.AirshotFunction = bool;
end);

LeftGroupBox:AddSlider('TracerThickness', {
    Text = 'Tracer Thickness',

    Default = 2,
    Min = 1,
    Max = 10,
    Rounding = 1,

    Compact = false, -- If set to true, then it will hide the label
})

Options.TracerThickness:OnChanged(function()
    Tracer.Thickness = Options.TracerThickness.Value;
end);


LeftGroupBox:AddSlider('Prediction', {
    Text = 'Prediction',

    Default = 1.2,
    Min = 1,
    Max = 4,
    Rounding = 1,

    Compact = false, -- If set to true, then it will hide the label
})

Options.Prediction:OnChanged(function()
	getgenv().Prediction = Options.Prediction.Value;
end);

LeftGroupBox:AddDropdown('AimPartsssXD', {
    Values = { 'Head', 'UpperTorso', 'LowerTorso' },
    Default = 2, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'AimPart',
    Tooltip = 'Changes the targetbot aimpart', -- Information shown when you hover over the textbox
})

Options.AimPartsssXD:OnChanged(function()
    getgenv().ZyZPart = Options.AimPartsssXD.Value;
end);

local UnderGroundXD = LeftGroupBox:AddButton('Underground Resolver', function()
    local RunService = game:GetService("RunService")

local function zeroOutYVelocity(hrp)
    hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
    hrp.AssemblyLinearVelocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        local hrp = character:WaitForChild("HumanoidRootPart")
        zeroOutYVelocity(hrp)
    end)
end

local function onPlayerRemoving(player)
    player.CharacterAdded:Disconnect()
end

game.Players.PlayerAdded:Connect(onPlayerAdded)
game.Players.PlayerRemoving:Connect(onPlayerRemoving)

RunService.Heartbeat:Connect(function()
    pcall(function()
        for i, player in pairs(game.Players:GetChildren()) do
            if player.Name ~= game.Players.LocalPlayer.Name then
                local hrp = player.Character.HumanoidRootPart
                zeroOutYVelocity(hrp)
            end
        end
    end)
end)
end)

local Otherkzisi9 = LeftGroupBox:AddButton('Other Resolver', function()
    getgenv().VelocityChanger = true
getgenv().Velocity = Vector3.new(200,0,200)


--// main scapt | realkscapter... omg
local Players     = game:GetService("Players")
local RunService  = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Character   = LocalPlayer.Character
local RootPart    = Character:FindFirstChild("HumanoidRootPart")

local Heartbeat, RStepped, Stepped = RunService.Heartbeat, RunService.RenderStepped, RunService.Stepped

LocalPlayer.CharacterAdded:Connect(function(NewCharacter)
   Character = NewCharacter
end)

local RVelocity, YVelocity = nil, 0.1

while true do
   if VelocityChanger then
       --// this a dumb check asnilsadsa
       if (not RootPart) or (not RootPart.Parent) or (not RootPart.Parent.Parent) then
           warn("weird ahh died")
           RootPart = Character:FindFirstChild("HumanoidRootPart")
       else
           RVelocity = RootPart.Velocity
   
           RootPart.Velocity = type(Velocity) == "vector" and Velocity or Velocity(RVelocity)
       
           RStepped:wait()
       
           RootPart.Velocity = RVelocity
       end
   end
   
   Heartbeat:wait()
end
end)

   
UtilitiesSec:AddToggle('AntiFling', {
        Text = 'AntiFling',
        Default = false, -- Default value (true / false)
        Tooltip = 'Enables or disables anti fling', -- Information shown when you hover over the toggle
})

Toggles.AntiFling:OnChanged(function(parameter)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = parameter
end)

MiscSec:AddDropdown('Run', {
    Values = { 'None', 'Rthro', 'Zombie', 'Werewolf', 'Ninja', 'Toy', 'Superhero', 'OldSchool', 'Cartoony', 'Stylish', 'Vampire' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Animations',
    Tooltip = 'Changes your run animations', -- Information shown when you hover over the textbox
})

Options.Run:OnChanged(function(dropdown)
    zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = dropdown
end)

game:GetService("RunService").Stepped:Connect(function ()
    if zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "None" then
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Rthro" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=2510198475"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Werewolf" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=1083216690"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Zombie" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=616163682"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Ninja" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=656118852"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Toy" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=782842708"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Superhero" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=616117076"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "OldSchool" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=5319844329"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Cartoony" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=742638842"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Stylish" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=616140816"
    elseif zxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx == "Vampire" then
        player.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=1083462077"
    end
end)

MovementTab:AddToggle('SpeedBindxd', {
    Text = 'Speed',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables cframe', -- Information shown when you hover over the toggle
}):AddKeyPicker("speedenablelolol", {
	Default = "Z",
	SyncToggleState = true,
	Mode = "Toggle",
	Text = "Speed Toggle",
	NoUI = false
});

Options.speedenablelolol:OnClick(function()
    if speedenablelolol == true
    then speedenablelolol = false
        if speedenablelolol == false
        then speedenablelolol = true
        end
    end
end)

Toggles.SpeedBindxd:OnChanged(function(parameter)
    speedenablelolol = parameter
end)

spawn(function()
    runservice.Heartbeat:Connect(function()
        if speedenablelolol == true then
            player.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame + player.Character.Humanoid.MoveDirection * SpeedValue
        end
    end)
end)

MovementTab:AddSlider('SpeedAmount', {
    Text = 'Speed Amount',
    Default = 1000,
    Min = 1,
    Max = 5000,
    Rounding = 1,
    Compact = false, -- If set to true, then it will hide the label
})

Options.SpeedAmount:OnChanged(function(State)
    SpeedValue = State/1000
end)


MovementTab:AddToggle('AutoJump', {
    Text = 'Auto Jump',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables auto jump', -- Information shown when you hover over the toggle
})

Toggles.AutoJump:OnChanged(function(parameter)
    AutoJumpXDlOLOLOL = parameter
end)

local VinGUIS = Aimviewers:AddButton('VinGUI Aim Viewer', function()
    hookfunction(game.Players.LocalPlayer.IsInGroup, function() return true end)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Nosssa/NossLock/main/VinGUI"))()
end)

local AntiAimViewer11 = Aimviewers:AddButton('Anti Aim Viewer', function()
    hookfunction(game.Players.LocalPlayer.IsInGroup, function() return true end)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Nosssa/NossLock/main/AntiAimViewer"))()
end)

MovementTab:AddToggle('FlightBindxdxd', {
    Text = 'Flight',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables flight', -- Information shown when you hover over the toggle
}):AddKeyPicker("XDXDXDLOL", {
	Default = "X",
	SyncToggleState = true,
	Mode = "Toggle",
	Text = "Flight Toggle",
	NoUI = false
});

Options.XDXDXDLOL:OnClick(function()
    if flightxdlol == true
    then flightxdlol = false
        if flightxdlol == false
        then flightxdlol = true
        end
    end
end)

Toggles.FlightBindxdxd:OnChanged(function(parameter)
flightxdlol = parameter    
    if parameter == true then
        FlyLoop = game:GetService("RunService").Stepped:Connect(function()
            spawn(function()
                pcall(function()
                    local speed = FlySpeed
                    local velocity = Vector3.new(0, 1, 0)
                    local UserInputService = game:GetService("UserInputService")
    
                    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                        velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * speed)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                        velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * -speed)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                        velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * -speed)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                        velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * speed)
                    end
                    
                    player.Character.HumanoidRootPart.Velocity = velocity
                    player.Character.Humanoid:ChangeState("Freefall")
                end)
            end)
        end)
    elseif flightxdlol == false and FlyLoop then
        FlyLoop:Disconnect()
        player.Character.Humanoid:ChangeState("Landing")
    end
end)

MovementTab:AddSlider('SpeedXDE', {
    Text = 'Fly Speed',
    Default = 1000,
    Min = 1,
    Max = 5000,
    Rounding = 1,
    Compact = false, -- If set to true, then it will hide the label
})

Options.SpeedXDE:OnChanged(function(State)
    FlySpeed = State/1000*50
end)

spawn(function()
    runservice.Heartbeat:Connect(function()
        if targetstrafeenabled and target_aim.Aiming.Target.Enabled and TargetAimEnabled then
            aroundtarget(speedtargetlocks,distancetargetlol,heighttargetlol,AZURE_TmKALRSX)
        end
    end)
end)

AASec:AddButton("Force Reset",function()
    for _,parts in pairs(player.Character:GetChildren()) do
        if parts:IsA("BasePart") then
            parts:Destroy()
        end
    end
end)


AASec:AddToggle('AABindLOL', {
    Text = 'Enable',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables anti lock', -- Information shown when you hover over the toggle
}):AddKeyPicker("fkadkfka", {
	Default = "J",
	SyncToggleState = true,
	Mode = "Toggle",
	Text = "Anti Lock Toggle",
	NoUI = false
});

Options.fkadkfka:OnClick(function()
    if aaenabled == false
    then aaenabled = true
        if aaenabled == true
        then aaenabled = false
end
end
end)

Toggles.AABindLOL:OnChanged(function(parameter)
    aaenabled = parameter
end)

AASec:AddDropdown('AAMODE', {
    Values = { 'Custom', 'Prediction Changer', 'Prediction Disabler', 'Up', 'Down', 'AirOrthodox', 'Prediction Multiplier', 'Spinbot Desync' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Animations',
    Tooltip = 'Choose which anti lock you want', -- Information shown when you hover over the textbox
})

Options.AAMODE:OnChanged(function(dropdown)
    aamodex = dropdown
end)

AASec:AddSlider('CustomX', {
    Text = 'Custom X',
    Default = 10000,
    Min = -10000,
    Max = 10000,
    Rounding = 1,
    Compact = false, -- If set to true, then it will hide the label
})
AASec:AddSlider('CustomY', {
    Text = 'Custom Y',
    Default = 10000,
    Min = -10000,
    Max = 10000,
    Rounding = 1,
    Compact = false, -- If set to true, then it will hide the label
})
AASec:AddSlider('CustomZ', {
    Text = 'Custom Z',
    Default = 10000,
    Min = -10000,
    Max = 10000,
    Rounding = 1,
    Compact = false, -- If set to true, then it will hide the label
})
AASec:AddSlider('PredictionChanger', {
    Text = 'Prediction Changer',
    Default = 5,
    Min = -20,
    Max = 20,
    Rounding = 1,
    Compact = false, -- If set to true, then it will hide the label
})
AASec:AddSlider('DesyncAngles', {
    Text = 'Desync Angles',
    Default = 1000,
    Min = -1000,
    Max = 1000,
    Rounding = 1,
    Compact = false, -- If set to true, then it will hide the label
})

Options.CustomX:OnChanged(function(State)
    x_val = State
end)

Options.CustomY:OnChanged(function(State)
    y_val = State
end)

Options.CustomZ:OnChanged(function(State)
    z_val = State
end)

Options.PredictionChanger:OnChanged(function(State)
    Custom123 = State
end)

Options.DesyncAngles:OnChanged(function(State)
    DesyncAngles = State
end)

local heartbeat = game:GetService("RunService").Heartbeat
local renderstepped = game:GetService("RunService").RenderStepped
local stepped = game:GetService("RunService").Stepped
local v3 = Vector3.new
local hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
local lp = game.Players.LocalPlayer

spawn(function()
    heartbeat:Connect(function()
        if player.Character.Humanoid.Health <= 10 then
            aaenabled = false
        end
    end)
end)

spawn(function()
    local hrp, c, vel, movel = nil, nil, nil, 0.1
    c = lp.Character
    hrp = lp.Character.HumanoidRootPart
    while true do
        heartbeat:Wait()
        while aaenabled and not (c and c.Parent and hrp and hrp.Parent) do
            heartbeat:Wait()
            c = lp.Character
            hrp = lp.Character.HumanoidRootPart
        end
        if aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "Custom" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(x_val,y_val,z_val)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
          elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "Prediction Changer" then
            vel = hrp.Velocity
            hrp.Velocity = vel*Custom123+v3(0,0,0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end

        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "Prediction Disabler" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,-0,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "Up" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,10000000000000000000,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "Down" then
            vel = hrp.Velocity
            hrp.Velocity = vel*-0+v3(-0,-10000000000000000000,-0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
            elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "AirOrthodox" then
            vel = hrp.Velocity
            hrp.Velocity = vel*1+v3(77,77,77)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
                        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "Prediction Multiplier" then
            vel = hrp.Velocity
            hrp.Velocity = vel*7+v3(0,0,0)
            renderstepped:Wait()
            hrp.Velocity = vel
            stepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel + v3(0, movel, 0)
                movel = movel * -1
            end
        elseif aaenabled and c and c.Parent and hrp and hrp.Parent and aamodex == "Spinbot Desync" then
            vel = hrp.Velocity
            hrp.Velocity = vel * 0 + v3(0,10000000000000000000,0)
            renderstepped:Wait()
            if c and c.Parent and hrp and hrp.Parent then
                hrp.Velocity = vel
            end
            player.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(DesyncAngles), 0)
        end
    end
end)

spawn(function()
    runservice.Heartbeat:Connect(function()
        if AutoJumpXDlOLOLOL == true and player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and player.Character.Humanoid.MoveDirection.Magnitude > 0 then
            player.Character.Humanoid:ChangeState("Jumping")
            settotruexdxd:Set(true)
        end
        
    end)
end)

UtilitiesSec:AddToggle('NoJumpCooldown', {
    Text = 'No Jump Cooldown',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables no jump cooldown', -- Information shown when you hover over the toggle
})


Toggles.NoJumpCooldown:OnChanged(function(parameter)
    nn_nojumpcooldown = parameter
end)

spawn(function()
    runservice.Heartbeat:Connect(function()
        if nn_nojumpcooldown then
            player.Character.Humanoid.UseJumpPower = false
        else
            player.Character.Humanoid.UseJumpPower = true
        end
    end)
end)

UtilitiesSec:AddToggle('NoSlowdown', {
    Text = 'No Slowdown',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables no slowdown', -- Information shown when you hover over the toggle
})

Toggles.NoSlowdown:OnChanged(function(parameter)
    nn_noslowdown = parameter
end)

spawn(function()
    runservice.Heartbeat:Connect(function()
        if nn_noslowdown then
            local bodyeffectsBounderies = player.Character.BodyEffects.Movement:FindFirstChild('NoJumping') or player.Character.BodyEffects.Movement:FindFirstChild('ReduceWalk') or player.Character.BodyEffects.Movement:FindFirstChild('NoWalkSpeed')
            if bodyeffectsBounderies then
                bodyeffectsBounderies:Destroy()
            end
            if player.Character.BodyEffects.Reload.Value == true then
                player.Character.BodyEffects.Reload.Value = false
            end
        end
    end)
end)

AimingLockSection:AddToggle('aimbotENABLE', {
    Text = 'Enabled',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables aimbot', -- Information shown when you hover over the toggle
}):AddKeyPicker("aimbotKeybind", {
	Default = "E",
	SyncToggleState = false,
	Mode = "Always",
	Text = "Aimbot Toggle",
	NoUI = false
});

Toggles.aimbotENABLE:OnChanged(function(parameter)
    aimbotenab = parameter
end)

Options.aimbotKeybind:OnClick(function(val)
    botbindlol = val
end)

AimingLockSection:AddInput('Aimbotpred', {
    Default = '',
    Numeric = true, -- true / false, only allows numbers
    Finished = false, -- true / false, only calls callback when you press enter

    Text = 'Prediction Amount',

    Placeholder = 'Prediction Amount', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text
})

Options.Aimbotpred:OnChanged(function(State)
    aimbotprediction = State
end)

AimingLockSection:AddDropdown('AimPart', {
    Values = { 'Head', 'HumanoidRootPart', 'UpperTorso', 'LowerTorso' },
    Default = 2, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Aim-Part',
    Tooltip = 'Changes the aimbots aimpart', -- Information shown when you hover over the textbox
})

Options.AimPart:OnChanged(function(dropdown)
    oldvallol = dropdown
end)

AimingLockSection:AddToggle('SmoothingXDAimbot', {
    Text = 'Smoothing',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables smoothing', -- Information shown when you hover over the toggle
})

Toggles.SmoothingXDAimbot:OnChanged(function(parameter)
    SmoothingEnabLOLL = parameter
end)

AimingLockSection:AddInput('SmoothingXDSS', {
    Default = '',
    Numeric = true, -- true / false, only allows numbers
    Finished = false, -- true / false, only calls callback when you press enter

    Text = 'Smoothing Amount',

    Placeholder = 'Smoothing Amount', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text
})

Options.SmoothingXDSS:OnChanged(function(State)
    SmoothingValIg = State
end)

AimingLockSection:AddDropdown('SmoothingStyle', {
    Values = { 'Linear', 'Sine', 'Back', 'Quad', 'Quart', 'Quint', 'Bounce', 'Elastic', 'Exponential', 'Circular', 'Cubic' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Smoothing Style',
    Tooltip = 'Changes the aimbots smoothing style', -- Information shown when you hover over the textbox
})

Options.SmoothingStyle:OnChanged(function(dropdown)
    smoothingtypexd = dropdown
end)

AimingLockSection:AddDropdown('SmoothingDirectionS', {
    Values = { 'In', 'Out', 'InOut' },
    Default = 3, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Smoothing Direction',
    Tooltip = 'Changes the aimbots smoothing direction', -- Information shown when you hover over the textbox
})

Options.SmoothingDirectionS:OnChanged(function(dropdown)
    easingdirectionxdxlol = dropdown
end)

AimingLockSection:AddToggle('JumpPart', {
    Text = 'Jump Part',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables or disables jump part', -- Information shown when you hover over the toggle
})

Toggles.JumpPart:OnChanged(function(parameter)
    jumppartthingy = parameter
end)

AimingLockSection:AddDropdown('JumpPartValue', {
    Values = { 'Head', 'HumanoidRootPart', 'UpperTorso', 'LowerTorso', 'RightUpperLeg', 'RightLowerLeg', 'RightFoot', 'LeftUpperLeg', 'LeftLowerLeg', 'LeftFoot' },
    Default = 4, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Jump Part Value',
    Tooltip = 'Changes the aimbots jump part', -- Information shown when you hover over the textbox
})

Options.JumpPartValue:OnChanged(function(dropdown)
    jumppartvaluesxd = dropdown
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if AZURE_TmKALxRxSX.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            aimbotpartxd = jumppartvaluesxd
        else
            aimbotpartxd = oldvallol
        end
    end)
end)

spawn(function()
    uis.InputBegan:Connect(function (input)
        if input.KeyCode == botbindlol then
            AimbotBindEnabled = not AimbotBindEnabled   
            if AimbotBindEnabled then
                AZURE_TmKALxRxSX = targetchosen()
            end
        end
    end)
end)



-- Fetching a toggle object for later use:
-- Toggles.MyToggle.Value

-- Toggles is a table added to getgenv() by the library
-- You index Toggles with the specified index, in this case it is 'MyToggle'
-- To get the state of the toggle you do toggle.Value

-- Calls the passed function when the toggle is updated
-- Groupbox:AddButton
-- Arguments: Text, Callback

local FreeLimss = Player:AddButton('Free Limiteds Script', function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/CoolKid52321/rasrxrzdrz/main/rezrzrze.txt'))()
end)

local Headless = Player:AddButton('Headless', function()
    game.Players.LocalPlayer.Character.Head.Transparency = 1
    game.Players.LocalPlayer.Character.Head.Transparency = 1
    for i,v in pairs(game.Players.LocalPlayer.Character.Head:GetChildren()) do
        if (v:IsA("Decal")) then
            v.Transparency = 1
        end 
    end
end)

local LeftKorblox = Player:AddButton('Left Korblox', function()
    local ply = game.Players.LocalPlayer
    local chr = ply.Character
    chr.LeftFoot.MeshId = "http://www.roblox.com/asset/?id=902942077"
    chr.LeftFoot.Transparency = 1
    chr.LeftLowerLeg.MeshId = "http://www.roblox.com/asset/?id=902942101"
    chr.LeftLowerLeg.TextureID = "http://roblox.com/asset/?id=902842271"
    chr.LeftUpperLeg.MeshId = "http://www.roblox.com/asset/?id=902942082"
    chr.LeftUpperLeg.TextureID = "http://roblox.com/asset/?id=902842271"
end)

local RightKorblox = Player:AddButton('Right Korblox', function()
    local ply = game.Players.LocalPlayer
    local chr = ply.Character
    chr.RightLowerLeg.MeshId = "902942093"
    chr.RightLowerLeg.Transparency = "1"
    chr.RightUpperLeg.MeshId = "http://www.roblox.com/asset/?id=902942096"
    chr.RightUpperLeg.TextureID = "http://roblox.com/asset/?id=902843398"
    chr.RightFoot.MeshId = "902942089"
    chr.RightFoot.Transparency = "1"
end)

local RainbowChracter = Player:AddButton('Rainbow Character', function()
    for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if v:IsA("MeshPart") then
            v.Material = "ForceField"
            spawn(function()
                while wait() do
                    for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                        if v:IsA("MeshPart") then
                            v.Color = Color3.fromHSV(tick()%5/5,1,1)
                            wait()
                        end
                    end 
                end
            end)
        end
    end
end)


local FarmStomp = FakeAnimationsSec:AddButton('Auto Farm Stomps', function()
    local rs = game:GetService("RunService")
    local Players = game:GetService("Players")
    if not Players.LocalPlayer then
      Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
    end
    local lp = Players.LocalPlayer
    local connections = {}
    
    local function getchar()
      return lp.Character or lp.CharacterAdded:Wait()
    end
    
    local MainEvent = game:GetService('ReplicatedStorage'):WaitForChild("MainEvent")
    
    local state = false
    local function initchar(char)
      local KO = char:WaitForChild("BodyEffects"):WaitForChild("KO")
      local Humanoid = char:WaitForChild("Humanoid")
    
      connections[Humanoid] = Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
         if KO.Value and Humanoid.Health >= 2 then
            if state then
               repeat task.wait() until not state
               if not KO.Value then return end
            end
            state = true
            local oldpos = getchar():WaitForChild("HumanoidRootPart").CFrame
            repeat
               if char then
                  getchar():WaitForChild("HumanoidRootPart").CFrame = CFrame.new(char:WaitForChild("Head").CFrame.Position) * CFrame.new(0,3,0)
               end
               rs.Heartbeat:Wait()
               MainEvent:FireServer('Stomp')
            until not (Humanoid or Humanoid.Parent or KO.Value) or Humanoid.Health <= 2
            getchar():WaitForChild("HumanoidRootPart").CFrame = oldpos
            state = false
         end
      end)
    end
    
    local function initplayer(plr)
      if not connections[plr] then
         connections[plr] = plr.CharacterAdded:Connect(initchar)
      end
      local plrchar = plr.Character
      if plrchar then
         initchar(plrchar)
      end
    end
    
    connections["PlayerAdded"] = Players.PlayerAdded:Connect(initplayer)
    connections["PlayerRemoving"] = Players.PlayerRemoving:Connect(function(plr)
      if connections[plr] then
         connections[plr]:Disconnect()
         connections[plr] = nil
      end
    end)
    
    for i,v in next, Players:GetPlayers() do
      if v ~= lp then
         initplayer(v)
      end
    end
    
    getgenv().toggle = function()
      for i,v in next, connections do
         v:Disconnect()
         print("Disconnecting",i,v)
      end
      getgenv().toggle = nil
    end
end)

local LowGFX = FakeAnimationsSec:AddButton('Low GFX', function()
    for _,v in pairs(workspace:GetDescendants()) do
        if v.ClassName == "Part"
        or v.ClassName == "SpawnLocation"
        or v.ClassName == "WedgePart"
        or v.ClassName == "Terrain"
        or v.ClassName == "MeshPart" then
        v.Material = "Plastic"
        end
        end
end)

local AutoStomp = FakeAnimationsSec:AddButton('Auto Stomp', function()
    while true do
        wait(.05)
        game.ReplicatedStorage.MainEvent:FireServer("Stomp")
        end
end)

local NoBullet = FakeAnimationsSec:AddButton('No Bullet Delay', function()
    local ReplicatedStorage = game.ReplicatedStorage
    local Network = game.Network
    local Delay = ReplicatedStorage.BulletHole.Delay

    Delay.Position:Destroy()
    Delay.Position = 0

    local nobulletdelay = game:GetService("CorePackages").Packages
    nobulletdelay:Destroy()

    local flashhasacrushonloris = game:GetService("CorePackages").Packages
    flashhasacrushonloris:Destroy()
end)

local ColorCorrection = FakeAnimationsSec:AddButton('Color Correction', function()
    local l = game:GetService("Lighting")

    local col = Instance.new("ColorCorrectionEffect", l)
    col.Brightness = 0
    col.Contrast = 0.01
    col.Saturation = 0.67
end)

local FPSBOOST = FakeAnimationsSec:AddButton('FPS Booster', function()
    local decalsyeeted = true 
    local g = game
    local w = g.Workspace
    local l = g.Lighting
    local t = w.Terrain
    t.WaterWaveSize = 0
    t.WaterWaveSpeed = 0
    t.WaterReflectance = 0
    t.WaterTransparency = 0
    l.GlobalShadows = false
    l.FogEnd = 9e9
    l.Brightness = 0
    settings().Rendering.QualityLevel = "Level01"
    for i, v in pairs(g:GetDescendants()) do
        if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
            v.Material = "Plastic"
            v.Reflectance = 0
        elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
            v.Transparency = 1
        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
            v.Lifetime = NumberRange.new(0)
        elseif v:IsA("Explosion") then
            v.BlastPressure = 1
            v.BlastRadius = 1
        elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
            v.Enabled = false
        elseif v:IsA("MeshPart") then
            v.Material = "Plastic"
            v.Reflectance = 0
            v.TextureID = 10385902758728957
        end
    end
    for i, e in pairs(l:GetChildren()) do
        if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
            e.Enabled = false
        end
    end
end)

local SSSSrr = FakeAnimationsSec:AddButton('Memory Spoofer', function()
    local Settings = {
        range1 = 500,
        range2 = 900,
        
    }
    
    for __, v in pairs(game.CoreGui.RobloxGui.PerformanceStats:GetChildren()) do
        if v.Name == "PS_Button" and v.StatsMiniTextPanelClass.TitleLabel.Text == "Mem" then
            Memory = v.StatsMiniTextPanelClass.ValueLabel
        end
    end
    
    Memory:GetPropertyChangedSignal("Text"):Connect(function()
        local Random = math.random(Settings.range1,Settings.range2)
        Random = Random * 1.23 
        Memory.Text = "".. Random .." MB"
    end)
end)

-- Button:AddButton
-- Arguments: Text, Callback
-- Adds a sub button to the side of the main button


-- Button:AddTooltip
-- Arguments: ToolTip

-- NOTE: You can chain the button methods!
--[[
    EXAMPLE: 

    LeftGroupBox:AddButton('Kill all', Functions.KillAll):AddTooltip('This will kill everyone in the game!')
        :AddButton('Kick all', Functions.KickAll):AddTooltip('This will kick everyone in the game!')
]]

-- Groupbox:AddLabel
-- Arguments: Text, DoesWrap
-- Library functions
-- Sets the watermark visibility
Library:SetWatermarkVisibility(false)

-- Sets the watermark text
Library:SetWatermark('LuckyHub | Da Hood Aim Trainer | Premium User')

Library.KeybindFrame.Visible = true; -- todo: add a function for this

Library:OnUnload(function()
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightControl', NoUI = true, Text = 'Menu keybind' }) 
MenuGroup:AddToggle('KeybindVisibility', {
    Text = 'Keybinds List Toggle',
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables and disables keybinds visibility', -- Information shown when you hover over the toggle
})

MenuGroup:AddToggle("Watermark", {
	Text = "Show Watermark",
	Default = true
}):OnChanged(function()
	Library:SetWatermarkVisibility(Toggles.Watermark.Value);
end);

Toggles.KeybindVisibility:OnChanged(function()
    if Library.KeybindFrame.Visible == false
    then Library.KeybindFrame.Visible = true
        else
            Library.KeybindFrame.Visible = false
            end
end)

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager. 
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings() 

-- Adds our MenuKeybind to the ignore list 
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

-- use case for doing it this way: 
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('LuckyHub')
SaveManager:SetFolder('LuckyHub/Dahood')
SaveManager:SetFolder('LuckyHub/Hoopz')
SaveManager:SetFolder('LuckyHub/Da Hood Aim Trainer')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings']) 

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config 
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()

local highlight_instance = Instance.new("Highlight",game.CoreGui)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and hightlightendalbed and TargetAimEnabled then
            highlight_instance.Parent = AZURE_TmKALRSX.Character
            highlight_instance.FillColor = fillcolorxd
            highlight_instance.OutlineColor = outlinecolorxdxdxd
            spawn(function()
                if hightlightendalbed == false then
                    highlight_instance.Parent = game.CoreGui
                end
            end)
        else
            highlight_instance.Parent = game.CoreGui
        end
    end)
end)

TargetLockSection:AddToggle("Stats", false, function(parameter)
    target_aim.Aiming.Target.TargetStats = parameter
end)



local dotDrawing = Drawing.new("Circle")

spawn(function()
    dotDrawing.Filled = true
    dotDrawing.Visible = false
    dotDrawing.Thickness = 2
    dotDrawing.Radius =	7
    dotDrawing.NumSides = 60
end)

local DotParent = Instance.new("Part",game.Workspace)
local newBillboard = Instance.new("BillboardGui", DotParent)

local newFrame = Instance.new("Frame", newBillboard)
local newUiCornor = Instance.new("UICorner", newFrame)

task.spawn(function ()
    newBillboard.Name = "azure_billboarddot"
    newBillboard.Adornee = DotParent
    newBillboard.Size = UDim2.new(0.6, 0, 0.6, 0)
    newBillboard.AlwaysOnTop = true
    newFrame.Size = UDim2.new(1, 0, 1, 0)
    newFrame.BackgroundTransparency = 0
    newUiCornor.CornerRadius = UDim.new(50, 50)
    DotParent.CanCollide = false
    DotParent.Anchored = true
    DotParent.CFrame = CFrame.new(0,2000,0)
    DotParent.Transparency = 1
end)

spawn(function()
    runservice.Stepped:Connect(function()
        if target_aim.Aiming.Target.Enabled and dotenabledlol then
            dotDrawing.Color = colorxdlololxdxd
            newFrame.BackgroundColor3 = colorxdlololxdxd
            if TargetAimEnabled and dotenabledlol then
                DotParent.CFrame = CFrame.new(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Position+Vector3.new(0,target_aim.Aiming.Target.JumpOffset,0)+(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Velocity*target_aim.Aiming.Target.Prediction))
                dotDrawing.Visible = false
            else
                DotParent.CFrame = CFrame.new(0,9999,0)
                if dotoncursorx then
                    dotDrawing.Visible = true
                    dotDrawing.Position = Vector2.new(mouse.X,mouse.Y + game:GetService("GuiService"):GetGuiInset().Y)
                    spawn(function()
                        if dotoncursorx == false then
                            dotDrawing.Visible = false
                        end
                    end)
                end
                spawn(function()
                    if dotoncursorx == false then
                        dotDrawing.Visible = false
                    end
                end)
            end
        else
            DotParent.CFrame = CFrame.new(0,9999,0)
            dotDrawing.Visible = false
        end
    end)
end)


spawn(function()
    runservice.Stepped:Connect(function()
        if randomizatxionxd then
            wait(0.6)
            player_gayparts = {"Head","UpperTorso","LowerTorso","HumanoidRootPart","RightUpperLeg","RightLowerLeg","LeftUpperLeg","LeftLowerLeg","RightUpperArm","RightLowerArm","LeftLowerArm","LeftUpperArm"}
            target_aim.Aiming.Target.TargetPart = player_gayparts[math.random(1,#player_gayparts)]
        else
            target_aim.Aiming.Target.TargetPart = hit_partxd
        end
    end)
end)

spawn(function()
    runservice.RenderStepped:Connect(function()
        if AimbotBindEnabled and aimbotenab and SmoothingEnabLOLL == false then
            local main_cframe = CFrame.new(workspace.CurrentCamera.CFrame.p, AZURE_TmKALxRxSX.Character[aimbotpartxd].Position + AZURE_TmKALxRxSX.Character[aimbotpartxd].Velocity/aimbotprediction)
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(main_cframe, 1, Enum.EasingStyle[smoothingtypexd], Enum.EasingDirection[easingdirectionxdxlol])
        elseif AimbotBindEnabled and aimbotenab and SmoothingEnabLOLL == true then
            local main_cframe = CFrame.new(workspace.CurrentCamera.CFrame.p, AZURE_TmKALxRxSX.Character[aimbotpartxd].Position + AZURE_TmKALxRxSX.Character[aimbotpartxd].Velocity/aimbotprediction)
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(main_cframe, SmoothingValIg, Enum.EasingStyle[smoothingtypexd], Enum.EasingDirection[easingdirectionxdxlol])
        end
    end)
end)

spawn(function()
    runservice.RenderStepped:Connect(function()
        if TargetAimEnabled and target_aim.Aiming.Target.Enabled and AZURE_TmKALRSX.Character:FindFirstChild("UpperTorso") then
            if target_aim.Aiming.Target.LookAt then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(player.Character.HumanoidRootPart.CFrame.Position, Vector3.new(AZURE_TmKALRSX.Character.HumanoidRootPart.CFrame.X, player.Character.HumanoidRootPart.CFrame.Position.Y, AZURE_TmKALRSX.Character.HumanoidRootPart.CFrame.Z))
                player.Character.Humanoid.AutoRotate = false
                spawn(function ()
                    if target_aim.Aiming.Target.LookAt == false then
                        player.Character.Humanoid.AutoRotate = true
                    end
                end)
            end
        else
            spawn(function()
                player.Character.Humanoid.AutoRotate = true
            end)
        end
    end)
end)

spawn(function()
    uis.InputBegan:Connect(function (input)
        if input.KeyCode == target_aim.Aiming.Target.Key and target_aim.Aiming.Target.Enabled then
            TargetAimEnabled = not TargetAimEnabled   
            if TargetAimEnabled then
                AZURE_TmKALRSX = targetchosen()
                if target_aim.Aiming.Target.Alerts then
                    Notify({
                        Title = "Azure [v."..Version.Value.."]",
                        Description = "Targeting: " ..tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName),
                        Duration = 3
                    })
                end
            elseif not TargetAimEnabled then
                if target_aim.Aiming.Target.Alerts then
                    Notify({
                        Title = "Azure ["..Version.Value.."]",
                        Description = "Untargeting: " ..tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName),
                        Duration = 3
                    })
                end
            end
        end
    end)
end)

local mt = getrawmetatable(game)
local old = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(...)
    local args = {...}
    if target_aim.Aiming.Target.Enabled and TargetAimEnabled and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" then
        args[3] = AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Position+Vector3.new(0.01,target_aim.Aiming.Target.JumpOffset,0.01)+(AZURE_TmKALRSX.Character[target_aim.Aiming.Target.TargetPart].Velocity*target_aim.Aiming.Target.Prediction)
        return old(unpack(args))
    end
    return old(...)
end)

local Azure_TargetStats = Instance.new("ScreenGui")
local Background = Instance.new("Frame")
local Picture = Instance.new("ImageLabel")
local Top = Instance.new("Frame")
local UIGradient = Instance.new("UIGradient")
local UIGradient_2 = Instance.new("UIGradient")
local HealthBarBackground = Instance.new("Frame")
local UIGradient_3 = Instance.new("UIGradient")
local HealthBar = Instance.new("Frame")
local UIGradient_4 = Instance.new("UIGradient")
local NameOfTarget = Instance.new("TextLabel")

spawn(function()
Azure_TargetStats.Name = "Azure_TargetStats"
Azure_TargetStats.Parent = game.CoreGui
Azure_TargetStats.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Background.Name = "Background"
Background.Parent = Azure_TargetStats
Background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Background.BorderSizePixel = 0
Background.Position = UDim2.new(0.388957828, 0, 0.700122297, 0)
Background.Size = UDim2.new(0, 358, 0, 71)
Background.Visible = false

Picture.Name = "Picture"
Picture.Parent = Background
Picture.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Picture.BorderSizePixel = 0
Picture.Position = UDim2.new(0.0279329624, 0, 0.0704225376, 0)
Picture.Size = UDim2.new(0, 59, 0, 59)
Picture.Transparency = 1
Picture.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"

Top.Name = "Top"
Top.Parent = Background
Top.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Top.BorderSizePixel = 0
Top.Position = UDim2.new(0, 0, -0.101449274, 0)
Top.Size = UDim2.new(0, 358, 0, 7)

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(184, 159, 227)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(102, 88, 156))}
UIGradient.Rotation = 90
UIGradient.Parent = Top

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(52, 52, 52)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))}
UIGradient_2.Rotation = 90
UIGradient_2.Parent = Background

HealthBarBackground.Name = "HealthBarBackground"
HealthBarBackground.Parent = Background
HealthBarBackground.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HealthBarBackground.BorderSizePixel = 0
HealthBarBackground.Position = UDim2.new(0.215083793, 0, 0.348234326, 0)
HealthBarBackground.Size = UDim2.new(0, 270, 0, 19)
HealthBarBackground.Transparency = 1

UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(58, 58, 58)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(30, 30, 30))}
UIGradient_3.Rotation = 90
UIGradient_3.Parent = HealthBarBackground

HealthBar.Name = "HealthBar"
HealthBar.Parent = HealthBarBackground
HealthBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
HealthBar.BorderSizePixel = 0
HealthBar.Position = UDim2.new(-0.00336122862, 0, 0.164894029, 0)
HealthBar.Size = UDim2.new(0, 130, 0, 19)

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(184, 159, 227)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(102, 88, 156))}
UIGradient_4.Rotation = 90
UIGradient_4.Parent = HealthBar

NameOfTarget.Name = "NameOfTarget"
NameOfTarget.Parent = Background
NameOfTarget.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
NameOfTarget.BackgroundTransparency = 1.000
NameOfTarget.Position = UDim2.new(0.220670387, 0, 0.0704225376, 0)
NameOfTarget.Size = UDim2.new(0, 268, 0, 19)
NameOfTarget.Font = Enum.Font.Code
NameOfTarget.TextColor3 = Color3.fromRGB(255, 255, 255)
NameOfTarget.TextScaled = true
NameOfTarget.TextSize = 14.000
NameOfTarget.TextStrokeTransparency = 0.000
NameOfTarget.TextWrapped = true
end)

local IsAlive = function(GetPlayer)
    return GetPlayer and GetPlayer.Character and GetPlayer.Character:FindFirstChild("HumanoidRootPart") ~= nil and GetPlayer.Character:FindFirstChild("Humanoid") ~= nil and GetPlayer.Character:FindFirstChild("Head") ~= nil and true or false
end

spawn(function()
    while wait() do
        if target_aim.Aiming.Target.TargetStats and target_aim.Aiming.Target.Enabled and TargetAimEnabled then
            if AZURE_TmKALRSX and IsAlive(AZURE_TmKALRSX) then
                Background.Visible = true
                NameOfTarget.Text = tostring(AZURE_TmKALRSX.Character.Humanoid.DisplayName).." ["..tostring(AZURE_TmKALRSX.Name).."]"
                Picture.Image  = "rbxthumb://type=AvatarHeadShot&id=" ..AZURE_TmKALRSX.UserId.. "&w=420&h=420"
                HealthBar:TweenSize(UDim2.new(AZURE_TmKALRSX.Character.Humanoid.Health / AZURE_TmKALRSX.Character.Humanoid.MaxHealth, 0, 1, 0), "In", "Linear", 0.25)
                spawn(function()
                    if target_aim.Aiming.Target.TargetStats == false then
                        Background.Visible = false
                    end
                end)
            end
        else
            Background.Visible = false
        end
    end
end)

function targetchosen()
    local distance = math.huge
    local zclosest
    local LocalPlayer = game.Players.LocalPlayer
    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = workspace.CurrentCamera:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalPlayer:GetMouse().X, LocalPlayer:GetMouse().Y)).magnitude
            if magnitude < distance then
                zclosest = v
                distance = magnitude
            end
        end
    end
    return zclosest
end

regera = 0

aroundtarget = function(speed, distance,height,target)
    regera = regera + speed
    player.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(regera), 0) * CFrame.new(0, height, distance)
end
